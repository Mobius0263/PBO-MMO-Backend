package main

import (
	"log"
	"os"

	"backend/config"
	"backend/routes"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/joho/godotenv"

	_ "backend/docs" // Import generated docs
)

//	@title			CoEmotion API
//	@version		1.0
//	@description	This is the API documentation for CoEmotion meeting management system
//	@termsOfService	http://swagger.io/terms/

//	@contact.name	API Support
//	@contact.url	http://www.swagger.io/support
//	@contact.email	support@swagger.io

//	@license.name	MIT
//	@license.url	https://opensource.org/licenses/MIT

//	@host		localhost:8080
//	@BasePath	/
//	@schemes	http https

//	@securityDefinitions.apikey	Bearer
//	@in							header
//	@name						Authorization
//	@description				Type "Bearer" followed by a space and JWT token.

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println("‚ö†Ô∏è No .env file found, using environment variables")
	}

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	httpsPort := os.Getenv("HTTPS_PORT")
	if httpsPort == "" {
		httpsPort = "8443"
	}

	// Check if JWT_SECRET is set
	if os.Getenv("JWT_SECRET") == "" {
		log.Println("‚ö†Ô∏è JWT_SECRET not set in environment variables, using default (insecure for production)")
	}

	// Set up CORS origins based on environment
	corsOrigins := "http://localhost:5173,http://localhost:5174"
	if prodOrigins := os.Getenv("CORS_ORIGINS"); prodOrigins != "" {
		corsOrigins = prodOrigins
	} else {
		// Add production origins
		corsOrigins += ",https://pbo-meet-up.vercel.app"
	}
	log.Printf("üåê CORS Origins: %s", corsOrigins)

	app := fiber.New(fiber.Config{
		ErrorHandler: func(c *fiber.Ctx, err error) error {
			// Log error secara detail
			log.Printf("‚ùå ERROR: %v\nPath: %s, Method: %s", err, c.Path(), c.Method())

			// Return error response
			code := fiber.StatusInternalServerError
			if e, ok := err.(*fiber.Error); ok {
				code = e.Code
			}

			return c.Status(code).JSON(fiber.Map{
				"error":  err.Error(),
				"path":   c.Path(),
				"method": c.Method(),
			})
		},
	})

	// Konfigurasi CORS yang benar untuk file uploads
	app.Use(cors.New(cors.Config{
		AllowOrigins:     corsOrigins,
		AllowMethods:     "GET,POST,PUT,DELETE,OPTIONS,PATCH",
		AllowHeaders:     "Origin, Content-Type, Accept, Authorization, X-Requested-With, Content-Length, Accept-Encoding, X-CSRF-Token, X-File-Name, Cache-Control",
		AllowCredentials: true,
		ExposeHeaders:    "Content-Length, Content-Disposition",
		MaxAge:           86400, // Cache preflight for 24 hours
	}))

	// Add Logger middleware
	app.Use(logger.New())

	// Serve static files
	app.Static("/uploads", "./uploads")

	// Connect to database
	config.ConnectDB()
	log.Println("‚úÖ Connected to database")

	// Setup routes
	routes.SetupRoutes(app)

	// Check if SSL certificates exist
	if _, err := os.Stat("certs/localhost.crt"); err == nil {
		if _, err := os.Stat("certs/localhost.key"); err == nil {
			// Start both HTTP and HTTPS servers
			go func() {
				log.Printf("üöÄ HTTP Server running at http://localhost:%s", port)
				if err := app.Listen(":" + port); err != nil {
					log.Printf("‚ùå Failed to start HTTP server: %v", err)
				}
			}()

			log.Printf("üîí HTTPS Server running at https://localhost:%s", httpsPort)
			log.Printf("üìö Swagger documentation: https://localhost:%s/swagger/index.html", httpsPort)
			log.Println("‚ö†Ô∏è Using self-signed certificate. Browser will show security warning.")
			
			if err := app.ListenTLS(":"+httpsPort, "certs/localhost.crt", "certs/localhost.key"); err != nil {
				log.Fatal("‚ùå Failed to start HTTPS server:", err)
			}
		} else {
			log.Println("‚ö†Ô∏è SSL private key not found. Running HTTP only.")
			startHTTPOnly(app, port)
		}
	} else {
		log.Println("‚ö†Ô∏è SSL certificate not found. Running HTTP only.")
		log.Println("üí° Run 'generate-cert.bat' to create SSL certificates for HTTPS support.")
		startHTTPOnly(app, port)
	}
}

func startHTTPOnly(app *fiber.App, port string) {
	log.Printf("üöÄ Server running at http://localhost:%s", port)
	log.Printf("üìö Swagger documentation: http://localhost:%s/swagger/index.html", port)
	log.Println("üí° Note: HTTPS scheme in Swagger is for production deployment with proper SSL certificates")
	
	if err := app.Listen(":" + port); err != nil {
		log.Fatal("‚ùå Failed to start server:", err)
	}
}
